package com.sist.main;

//2021.12.09 =>기본정리
//1. 변수 (메모리 저장 공간)
//   =>데이터형
//   정수:byte(파일입출력/네트워크전송),int,long  실수:double 문자:char ==>싱글(ASC=>1byte/멀티(Unicode=>2byte)
//   논리:boolean
//   참조:배열/클래스 
//       배열 (1차:고정) =>가변(Collection)
//   ***형변환(데이터형 변경))  =>클래스에서 형변환 ==크기 (is a, has a)
//   자동형변환 강제형변환         is a:상속(재사용  변경해서 사용)
//                           has a:포함(재사용  변경없이 사용)
//   자동형변환 => Upcasting
//   강제형변환 => Downcasting   **int이하 데이터형(byte,short,char)이 연상되면 int
//2. 연산자
//   단항 연산자   93페이지
//   = 증감연산자(++,--)
//   = 부정연산자(!)
//   = 형변환 연산자(type)
//   이항연산자
//   = 산술연산자(+,-,*,/,%)   97페이지
//     + :문자열결합, 실제산술연
//     / :0으로 나눌수 없다는것 기억하기. 정수/정수=정수
//     % :부호가 왼쪽편이다. -5%-2=-1  5%-2=1
//   = 비교연산자(==, !=, <,>,<=,>=)  boolean   109페이지
//   = 논리연산자(&&직렬, ||병렬)   효율적인 연산처리
//   = 대입연산자 (=,+=,-=)   132페이지
//3. 제어문
//   = 조건문 형식만 기억하자 단일조건문(if) 선택조건문(if else) 다중조건문(if else if else)
//   = 선택문(switch case)  게임에서 자주사용(Application) =>네트워크
//   = 반복문(while:반복회수가 없는 경우  do while:한번이상 수행  for:반복회수가 있을때   156페이지
//   = 반복제어문 break:반복중단  continue:특정부분제외    175페이지
//   =========연산자 + 제어문 = 메소드 ====================
//4. 모아서 관리
//   데이터를 모아서 관리 = 배열           형식공부 초기화방법공
//   명령문을 모아서 관리 = 메소드
//   ====================== + 클래스 (재사용이 가능)====================
//   HW / SW
//   HW : 70년대 ==>집적회로 (필요할때 재사용)
//   SW============= (80년대)모방 (클래스)
//5. 배열 = 연속적인 메모리구조 , 초기화쓰는 방법 숙지할것 1차만 알아도 된다, 인덱스(0번부터)
//6. 메소드 =========================================
//        결과값(리턴형)    매개변수(사용자요청)
//        =========================================
//        =사용자가 로그인 요청 : id, password
//        =매개변수 (id, password)
//        =로그인 OK, Fail => boolean
//         boolean isLogin(String id, String pwd)
//          O               O
//        =========================================
//         난수, 문자열 자르기
//        double Math.random()
//          O               X
//        =========================================
//        메소드 자체 처리  => void(insert, update, delete)
//        System.out.println("ssdasef")
//          X               O
//        =========================================
//          X               X
//        =========================================
//
//
//7. 객체지향
//8. 클래스
//   = 구성요소  : 변수(클래스,변수), 메소드(연산자+제어문), 생성자(초기화담당)
//9. 캡슐화(Secure Coding)  =>법적으로 의무화되었다.     면접단골질문 (9~10.2)
//   = 데이터보호를 목적. 은닉화시켜서 통신만 가능하게.           
//   = 경계를 준다. 구분을 준다.                            
//   = 변수 => private, 메소드 => public
//10.재사용(상속/포함)
//   = 상속 : 변경이 있는경우(기존의 소스를 변경해서 사용)
//   = 포함 : 변경이 없는경우(그대로 사용)
//10_2.변경/추가 => 다형성
//   = 변경 : 오버라이딩, 추가 : 오버로딩 
//11.클래스 종류
//   = 일반클래스 : 용도=데이터만 관리(읽기쓰기만 가능) => 데이터형 클래스 ~VO(MovieVO, FoodVO...), ~DTO
//                   기능 추가 관리 =>액션 클래스   ~DAO, ~Manager, ~Service
//   = 추상클래스 : 공통적인 내용을 모아서 관리  공통점을 뽑아서 단순화시키기 위해
//   = 인터페이스
//   = 내부클래스
//     = 멤버클래스 (네트워크, 쓰레드)
//        =>데들락
//     = 익명의 클래스 (상속없이 오버라이딩이 가능)
//     = 지역클래스
//12.예외처리  =>비정상 종료를 방지하고 정상수행이 가능
//             사전에 에러를 방지할 목적
//   = 예외 복구(try~catch)
//   = 예외 회피(throws)
//13.라이브러리
//     java.lang = Object, String, StringBuffer, Wrapper, Math
//     java.util = Date, Calendar, StringTokenizer, Collection, Format
//     java.io = 파일저장, 다운로드, 업로
//     java.net = URL, Socket
//     기타 => 외부 라이브러리(jsoup, simplejson...)
//     java.sql =>오라클 연결
//   ================================================
//   네트워크 =>온라인 게임, ERP, 화상
//   데이터베이스(웹) => 주력(CURD)
//   분석
public class MainClass {
	
	public static void main(String[] args) {
		//배열 => 1차
		//배열선언
		//배열의초기화
		//읽기 => 출력 (반복문 쓰는 방법)
		
		int []arr = {1,2,3,4,5};  //선언과 동시에 초기화
		//int []arr = new int [5]  0으로 초기화 => 나중에 값을 채운다.
		//정렬처리
		for(int i:arr) {    //for-each문 (웹) =>제어(값변경X) 출력만!
			System.out.println(i);
		}
		//for(저장된 데이터형 변수명 : 배열/컬렉션)
		String[]title = {"스파이더맨","몬스타엑스","듄","돈룩업","연애빠진로맨스"};
		double[]reserve = {67.3, 9.2,4.1,4.0,1.8};
		for(int i = 0; i<title.length; i++) {
			System.out.println(title[i] + "(예매율:"+ reserve[i] + "%)");
		}
		
		//예매율이 가장 높은 영화명 출력
		double max = 0.0;
		int index = 0;
		for (int i = 0; i < reserve.length; i++) {
			if(max < reserve[i]) {
				max = reserve [i];  //가장 높은 예매율
				index = i;          //영화명을 찾기 위한 index저장
			}
		}
		//결과
		System.out.println(title[index]);
		System.out.println("예매율:" + max);
	}

}
